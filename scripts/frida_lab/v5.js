console.log("[*] Starting script execution");
setTimeout(function(){
	function printInteger(i,z){
		return ("000000"+i).slice(-z);
	}

	function hook_fucntions(){
		console.log('[*] Starting execution for hook_fucntions() fucntion.');

		Java.perform(function(){
			if(! Java.available){
				console.log("[-] Java object is not available");
				return;
			}

			var hookClass = Java.use("com.hackerone.mobile.challenge2.MainActivity");
			var secretBoxClass = Java.use("org.libsodium.jni.crypto.SecretBox");
			var systemClass = Java.use("java.lang.System");
			var nonce = Java.array('byte',[ 97, 97, 98, 98, 99, 99, 100, 100, 101, 101, 102, 102, 103, 103, 104, 104, 97, 97, 98, 98, 99, 99, 100, 100]);
			var cipherText = Java.array('byte',[ 150, 70, 209, 62, 200, 248, 97, 125, 28, 234, 28, 244, 51, 73, 64, 130, 76, 112, 10, 223, 106, 122, 50, 54, 22, 60, 162, 201, 96, 75, 155, 228, 189, 231, 112, 173, 105, 140, 2, 7, 15, 87, 26, 11, 97, 43, 189, 53, 114, 216, 31, 153]);

			console.log("[*]",nonce);
			console.log("[*]",cipherText);
			Java.choose("com.hackerone.mobile.challenge2.MainActivity",{
				"onMatch":function(liveInstance){
					console.log("\n");
					console.log("[*] Live instace found at",liveInstance);

					var secretBoxInstance;
					var failed;

					var counter = 0;
					liveInstance.resetCoolDown();
					var currentPin;
					var currentKey;
					console.log('[*] Performing cooldown');
					for(var i = 999999;i>=0;i--){
						//Generate the key
						currentPin = printInteger(i,6);
						currentKey = liveInstance.getKey(currentPin);
						console.log("[+] Key for",currentPin,":",liveInstance.bytesToHex(currentKey));

						//Try decryption
						try{
							secretBoxInstance = secretBoxClass.$new(currentKey);
							failed = false;
							secretBoxInstance.decrypt(nonce,cipherText);
						}
						catch(err){
							failed = true;
						}
						finally{
							if(failed){
								console.log("[*] Failed");
							}
							else{
								console.log("[+] Success");
								console.log(currentPin,':',currentKey);
								break;
							}
						}

						//Reset the count
						counter++;
						if(counter==49){
							systemClass.gc();
							liveInstance.resetCoolDown();
							console.log('[*] Performing cooldown');
							counter = 0;
						}
					}
					console.log("\n");
				},
				"onComplete":function(){
					console.log("[*] Script execution completed.");
				}
			});
		});
		console.log('[*] Execution for hook_fucntions() fucntion completed.');
	}

	hook_fucntions();
},0);